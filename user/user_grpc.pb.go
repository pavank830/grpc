// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDetailsClient is the client API for UserDetails service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDetailsClient interface {
	GetUserByID(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error)
	ListUsersByID(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
}

type userDetailsClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDetailsClient(cc grpc.ClientConnInterface) UserDetailsClient {
	return &userDetailsClient{cc}
}

func (c *userDetailsClient) GetUserByID(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, "/user.UserDetails/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDetailsClient) ListUsersByID(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, "/user.UserDetails/ListUsersByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDetailsServer is the server API for UserDetails service.
// All implementations must embed UnimplementedUserDetailsServer
// for forward compatibility
type UserDetailsServer interface {
	GetUserByID(context.Context, *UserReq) (*UserResp, error)
	ListUsersByID(context.Context, *UserListReq) (*UserListResp, error)
	mustEmbedUnimplementedUserDetailsServer()
}

// UnimplementedUserDetailsServer must be embedded to have forward compatible implementations.
type UnimplementedUserDetailsServer struct {
}

func (UnimplementedUserDetailsServer) GetUserByID(context.Context, *UserReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserDetailsServer) ListUsersByID(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersByID not implemented")
}
func (UnimplementedUserDetailsServer) mustEmbedUnimplementedUserDetailsServer() {}

// UnsafeUserDetailsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDetailsServer will
// result in compilation errors.
type UnsafeUserDetailsServer interface {
	mustEmbedUnimplementedUserDetailsServer()
}

func RegisterUserDetailsServer(s grpc.ServiceRegistrar, srv UserDetailsServer) {
	s.RegisterService(&UserDetails_ServiceDesc, srv)
}

func _UserDetails_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDetailsServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserDetails/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDetailsServer).GetUserByID(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDetails_ListUsersByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDetailsServer).ListUsersByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserDetails/ListUsersByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDetailsServer).ListUsersByID(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDetails_ServiceDesc is the grpc.ServiceDesc for UserDetails service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDetails_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserDetails",
	HandlerType: (*UserDetailsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByID",
			Handler:    _UserDetails_GetUserByID_Handler,
		},
		{
			MethodName: "ListUsersByID",
			Handler:    _UserDetails_ListUsersByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
